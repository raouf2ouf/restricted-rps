import{B as l,t as y,u as w,v as p,I as h,x as g,y as k,z as O,A as L,H as m,C as E}from"./index-XE5Ec2nS.js";class x extends l{constructor({callbackSelector:e,cause:t,data:o,extraData:c,sender:i,urls:s}){super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?"":[],"Offchain Gateway Call:",s&&["  Gateway URL(s):",...s.map(d=>`    ${y(d)}`)],`  Sender: ${i}`,`  Data: ${o}`,`  Callback selector: ${e}`,`  Extra data: ${c}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class M extends l{constructor({result:e,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${y(t)}`,`Response: ${w(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class R extends l{constructor({sender:e,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}function $(r,e){if(!p(r))throw new h({address:r});if(!p(e))throw new h({address:e});return r.toLowerCase()===e.toLowerCase()}const C="0x556f1830",A={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function P(r,{blockNumber:e,blockTag:t,data:o,to:c}){const{args:i}=g({data:o,abi:[A]}),[s,d,a,n,f]=i;try{if(!$(c,s))throw new R({sender:s,to:c});const u=await S({data:a,sender:s,urls:d}),{data:b}=await L(r,{blockNumber:e,blockTag:t,data:O([n,k([{type:"bytes"},{type:"bytes"}],[u,f])]),to:c});return b}catch(u){throw new x({callbackSelector:n,cause:u,data:o,extraData:f,sender:s,urls:d})}}async function S({data:r,sender:e,urls:t}){let o=new Error("An unknown error occurred.");for(let c=0;c<t.length;c++){const i=t[c],s=i.includes("{data}")?"GET":"POST",d=s==="POST"?{data:r,sender:e}:void 0;try{const a=await fetch(i.replace("{sender}",e).replace("{data}",r),{body:JSON.stringify(d),method:s});let n;if(a.headers.get("Content-Type")?.startsWith("application/json")?n=(await a.json()).data:n=await a.text(),!a.ok){o=new m({body:d,details:n?.error?w(n.error):a.statusText,headers:a.headers,status:a.status,url:i});continue}if(!E(n)){o=new M({result:n,url:i});continue}return n}catch(a){o=new m({body:d,details:a.message,url:i})}}throw o}export{S as ccipFetch,P as offchainLookup,A as offchainLookupAbiItem,C as offchainLookupSignature};
